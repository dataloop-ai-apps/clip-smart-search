{
  "projectId": null,
  "orgId": null,
  "connections": [
  ],
  "startNodes": [
    {
      "nodeId": "53ed006d-a98d-488a-8aec-e4980408e538",
      "type": "root",
      "id": "6e6c4f7a-a874-468b-af03-b7389dd6fe84"
    }
  ],
  "variables": [
    {
      "name": "dataset",
      "type": "Dataset",
      "description": null
    },
    {
      "name": "service",
      "type": "Service",
      "description": null
    }
  ],
  "description": "",
  "name": "CLIP-Dataset",
  "templateKind": "org",
  "nodes": [
    {
      "id": "53ed006d-a98d-488a-8aec-e4980408e538",
      "inputs": [
        {
          "portId": "70655202-45ab-495b-9ef3-a6034f66311d",
          "nodeId": "70655202-45ab-495b-9ef3-a6034f66311d",
          "type": "Dataset",
          "name": "dataset",
          "displayName": "dataset",
          "variableName": "dataset",
          "io": "input"
        },
        {
          "portId": "19fdda69-5aa6-4e38-a4f0-3006da6066b3",
          "nodeId": "19fdda69-5aa6-4e38-a4f0-3006da6066b3",
          "type": "Service",
          "name": "service",
          "displayName": "service",
          "variableName": "service",
          "io": "input"
        }
      ],
      "outputs": [
      ],
      "name": "clip-test",
      "type": "code",
      "namespace": {
        "functionName": "run",
        "projectName": null,
        "serviceName": "",
        "moduleName": null,
        "packageName": ""
      },
      "projectId": null,
      "config": {
        "package": {
          "code": "import dtlpy as dl\n\n\nclass ServiceRunner:\n    @staticmethod\n    def run(dataset: dl.Dataset, service: dl.Service):\n        # Define filters\n        filters = dl.Filters()\n        filters.add(field=\"dir\", values=\"/sub_folder\")\n\n        # Execute service\n        execution = service.execute(\n            execution_input=[\n                dl.FunctionIO(\n                    name=\"dataset\",\n                    type=dl.PackageInputType.DATASET,\n                    value=dataset.id\n                ),\n                dl.FunctionIO(\n                    name=\"query\",\n                    type=dl.PackageInputType.JSON,\n                    value=filters.prepare()\n                )\n            ],\n            project_id=dataset.project.id,\n            function_name=\"extract_dataset\"\n        )\n\n        # Wait for service execution to finish\n        execution = execution.wait()\n        if execution.status != dl.ExecutionStatus.SUCCESS:\n            raise ValueError(\n                f\"Service execution '{execution.id}' failed with status: '{service.status}'\"\n            )\n\n        # Validate execution output\n        execution_output = execution.output\n        assert isinstance(execution_output, dict)\n        dataset_id = execution_output.get(\"dataset_id\", None)\n        assert dataset_id == dataset.id\n\n        # Get tested items\n        tested_items_ids = list()\n        pages = dataset.items.list(filters=filters)\n        items_count = pages.items_count\n        for page in pages:\n            for item in page:\n                tested_items_ids.append(item.id)\n\n        # Get the newly created features\n        feature_set_name = 'clip-feature-set'\n        feature_set = dataset.project.feature_sets.get(feature_set_name=feature_set_name)\n        filters = dl.Filters(resource=dl.FiltersResource.FEATURE)\n        filters.add(field=\"entityId\", values=tested_items_ids, operator=dl.FiltersOperations.IN)\n        features = feature_set.features.list(filters=filters)\n        features_count = features.items_count\n\n        # Validations\n        assert features_count == items_count\n        for feature in features:\n            assert feature.entity_id in tested_items_ids\n            assert isinstance(feature.value, list)\n            assert len(feature.value) == 512\n        print(\"Service execution completed successfully!\")\n",
          "name": "run",
          "type": "code",
          "codebase": {
            "type": "item"
          }
        }
      },
      "metadata": {
        "position": {
          "x": 10000.0,
          "y": 10000.0,
          "z": 0
        },
        "repeatable": true
      }
    }
  ],
  "preview": "6693aef87bca9b4cfdf0fce0",
  "_id": "6693b1522e4faf9475730746"
}